using System;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.Owin;
using Microsoft.Owin.Security;
using ReadAllLibrary.Models;
using ReadAllLibrary.DAL;
using PagedList;
using Microsoft.AspNet.Identity.EntityFramework;
using ReadAllLibrary.ViewModels;
using ReadAllLibrary.Helpers;
using Braintree;
using System.Web.UI.WebControls;
using System.IO;
using System.Web.UI;
using System.Collections.Generic;
using Stripe;

namespace ReadAllLibrary.Controllers
{
    /// <summary>
    /// Autogenerated controller which handles user account management
    /// some additional methods have been added
    /// </summary>
    [Authorize]
    [HandleError]
    public class ManageController : BaseController
    {
        UnitOfWork uow = new UnitOfWork();
        LibraryAppContext db = new LibraryAppContext();

        public IBraintreeConfiguration config = new BraintreeConfiguration();

        //array of transaction status for braintree transaction results
        public static readonly TransactionStatus[] transactionSuccessStatuses = {
                                                                                    TransactionStatus.AUTHORIZED,
                                                                                    TransactionStatus.AUTHORIZING,
                                                                                    TransactionStatus.SETTLED,
                                                                                    TransactionStatus.SETTLING,
                                                                                    TransactionStatus.SETTLEMENT_CONFIRMED,
                                                                                    TransactionStatus.SETTLEMENT_PENDING,
                                                                                    TransactionStatus.SUBMITTED_FOR_SETTLEMENT
                                                                                };


        private ApplicationSignInManager _signInManager;
        private ApplicationUserManager _userManager;

        public ManageController()
        {
        }

        public ManageController(ApplicationUserManager userManager, ApplicationSignInManager signInManager)
        {
            UserManager = userManager;
            SignInManager = signInManager;
        }

        public ApplicationSignInManager SignInManager
        {
            get
            {
                return _signInManager ?? HttpContext.GetOwinContext().Get<ApplicationSignInManager>();
            }
            private set 
            { 
                _signInManager = value; 
            }
        }

        public ApplicationUserManager UserManager
        {
            get
            {
                return _userManager ?? HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>();
            }
            private set
            {
                _userManager = value;
            }
        }

        //
        // GET: /Manage/Index
        public async Task<ActionResult> Index(ManageMessageId? message)
        {
            ApplicationUser currentUser = GetCurrentUser();

            var um = new UserManager<ApplicationUser>(new UserStore<ApplicationUser>(new LibraryAppContext()));

            string role = um.GetRoles(currentUser.Id).FirstOrDefault().ToString();

            ViewBag.StatusMessage =
                message == ManageMessageId.ChangePasswordSuccess ? "Your password has been changed."
                : message == ManageMessageId.SetPasswordSuccess ? "Your password has been set."
                : message == ManageMessageId.SetTwoFactorSuccess ? "Your two-factor authentication provider has been set."
                : message == ManageMessageId.Error ? "An error has occurred."
                : message == ManageMessageId.AddPhoneSuccess ? "Your phone number was added."
                : message == ManageMessageId.RemovePhoneSuccess ? "Your phone number was removed."
                : "";

            var userId = User.Identity.GetUserId();
            var model = new IndexViewModel
            {
                HasPassword = HasPassword(),
                PhoneNumber = await UserManager.GetPhoneNumberAsync(userId),
                TwoFactor = await UserManager.GetTwoFactorEnabledAsync(userId),
                Logins = await UserManager.GetLoginsAsync(userId),
                BrowserRemembered = await AuthenticationManager.TwoFactorBrowserRememberedAsync(userId),
                user = currentUser,
                Role = role,
                
                
            };

            //display fines message if user has fines
            foreach (var f in GetCurrentUser().Fines) {
                if(f.payment == null)
                {
                    TempData["HasFines"] = true;
                }
            else
            {
                    TempData["HasFines"] = false;
                }
            }
            return View(model);
        }
      

        /// <summary>
        /// GETS the user details to be displayed in view
        /// </summary>
        /// <param name="id">id of user whos details are to be displayed</param>
        /// <returns>the user details to the view</returns>
        //get
        public ActionResult EditUserDetails(string id)
        {
            ApplicationUser user = uow.UserRepository.Get(m => m.Id.Equals(id));

            EditDetailsViewModel editDetailsModel = new EditDetailsViewModel
            {
                Email = user.Email,
                User = user,
                FName = user.FName,
                LName = user.LName,
                PostCode = user.PostalCode,
                Address = user.Address,
                City = user.City
            };

            return View(editDetailsModel);
        }

        /// <summary>
        /// POST method which posts the updated user details to the UOW
        /// </summary>
        /// <param name="editDetailsModel">updated user object</param>
        /// <returns>a redirect to the index method of manage controller</returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> EditUserDetailsPost(EditDetailsViewModel editDetailsModel)
        {
            var um = new UserManager<ApplicationUser>(new UserStore<ApplicationUser>(new LibraryAppContext()));

            

            //get current user, update details
            ApplicationUser currentUser = uow.UserRepository.Get(m => m.Email.Equals(editDetailsModel.Email));

            editDetailsModel.User = currentUser;

            var userEmailEdit = await um.FindByIdAsync(currentUser.Id);



            currentUser.PostalCode = editDetailsModel.PostCode;
            currentUser.City = editDetailsModel.City;
            currentUser.Address = editDetailsModel.Address;
            currentUser.Email = editDetailsModel.Email;
            currentUser.FName = editDetailsModel.FName;
            currentUser.LName = editDetailsModel.LName;
            userEmailEdit.Email = editDetailsModel.Email;
            



            currentUser.Role = currentUser.Role;
         
            currentUser.Id = userEmailEdit.Id;
            
            currentUser.PasswordHash = userEmailEdit.PasswordHash;
            currentUser.SecurityStamp = userEmailEdit.SecurityStamp;




            uow.UserRepository.Update(currentUser);
            uow.SaveChanges();
            return RedirectToAction("Index");

        }


        /**********************FINE SECTION******************************/


        /// <summary>
        /// Gets information about requested fine and returns this to the view
        /// </summary>
        /// <param name="id">id of fine to be displayed</param>
        /// <returns>fine object to view</returns>
        //get
        public ActionResult PayFineView(string id)
        {
            var fine = uow.FineRepository.Get(m => m.User.Id.Equals(id) && m.payment == null);

            return View(fine);
        }

        /// <summary>
        /// displays view where user choses payment method
        /// </summary>
        /// <returns>View</returns>
        public ActionResult ChooseFinePaymentMethod()
        {
            

            return View();
        }

   
        /// <summary>
        /// Displays view where user can enter payment details
        /// </summary>
        /// <param name="error">if user has entered incorrect details this is true and message is displayed, else this is false</param>
        /// <returns>View for obtaining payment details</returns>
        public ActionResult ChargeView(bool?error)
        {
            if (error == true)
            {
                ViewBag.Error = "Whoops, something went wrong please try again. Ensure all fields are filled in and postcode is in the format XXX XXX";
            }

            //populate viewmodel
            StripeChargeModel scm = new StripeChargeModel();

            string id = GetCurrentUser().Id;
            var fine = uow.FineRepository.Get(m => m.User.Id.Equals(id)&& m.payment == null);

            scm.Amount = Convert.ToDouble(fine.Amount);

            //show users registered address
            //allow them to edit this for billing details
            scm.Address = GetCurrentUser().Address;
            scm.AddressCity = GetCurrentUser().City;
            scm.AddressPostcode = GetCurrentUser().PostalCode;

            return View(scm);
        }
        
        /// <summary>
        /// creates card payment for fine 
        /// </summary>
        /// <param name="model">values from the payment view</param>
        /// <returns>FineConfirmation view if success, else charge view</returns>
        [HttpPost]
        public async Task<ActionResult> Charge(StripeChargeModel model)
        {
            //if model state is not valid return view
            if (!ModelState.IsValid)
            {
                
                return RedirectToAction("ChargeView", new { error = true });
            }

                var chargeId = await ProcessPayment(model);

            //current user
            string id = GetCurrentUser().Id;
            ApplicationUser user = uow.UserRepository.Get(m => m.Id.Equals(id));
            var fine = uow.FineRepository.Get(m => m.User.Id.Equals(id) && m.payment == null);//get unpaid fine

            //if process payment is successful create payment
            if (chargeId != null)
                {
                    string cardNum = model.CardNumber.ToString();
                    string exM = model.ExpiryMonth.ToString();
                    string exY = model.ExpiryYear.ToString();
                    string Name = model.CardHolderName.ToString();
                    string billingAddress = model.Address.ToString();
                    string billingCity = model.AddressCity.ToString();
                    string billingPostcode = model.AddressPostcode.ToString();

                //create payment object
                    Payment payment = new Payment
                    {
                        CardAddress = billingAddress,
                        CardCity = billingCity,
                        CardPostCode = billingPostcode,
                        CardNumber = cardNum,
                        ExpiryMonth = exM,
                        ExpiryYear = exY,
                        Name = Name,

                        DatePaid = DateTime.Now,
                        PaymentMethod = (Models.PaymentMethod)0,
                    };

                //add information to fine object
                //update user access rights
                fine.payment = payment;
                fine.Paid = payment.DatePaid;

                user.Fines.Add(fine);

                fine.User = user;

                fine.order = uow.OrderRepository.Get(m => m.OrderStatus == 2 && m.UserOrderId.Equals(fine.User.Id));

                

                user.AccountRestricted = false;

               

                uow.SaveChanges();

                return RedirectToAction("FinePaymentConfirmation", new { id = fine.FineId});

                }
            
            //if charge fails
            return View(model);

        }


        /// <summary>
        /// Method which displays view which allows user to pay view paypal
        /// </summary>
        /// <returns>the paypal payment viewmodel to the view</returns>
        public ActionResult PayPalPayment()
        {
            string id = GetCurrentUser().Id;
            var fine = uow.FineRepository.Get(m => m.User.Id.Equals(id));

            //create viewmodel and populate
            PayPalViewModel ppvm = new PayPalViewModel();

            ppvm.Amount = Convert.ToDouble(fine.Amount);
            var gateway = config.GetGateway();
            var clientToken = gateway.ClientToken.generate();
            ViewBag.ClientToken = clientToken;

            return View(ppvm);
        }

        /// <summary>
        /// POST method which create paypal payment for fine
        /// </summary>
        /// <param name="collection">information from submitted form, including payment nonce and amount</param>
        /// <returns>Fine confirmation view id successful, else redirect to Index view</returns>
        public ActionResult CreatePaypalPayment(FormCollection collection)
        {
            
            string id = GetCurrentUser().Id;
            ApplicationUser user = uow.UserRepository.Get(m => m.Id.Equals(id));
            var fine = uow.FineRepository.Get(m => m.User.Id.Equals(id) && m.payment == null);

            var gateway = config.GetGateway();
            decimal amount;
            
            try//remove
            {
                amount = Convert.ToDecimal(Request["amount"]);
            }
            catch (FormatException ex)
            {
                Console.WriteLine(ex.ToString());
                return RedirectToAction("Index");
            }

            //nonce from view
            var nonce = Request.Form["payment_method_nonce"];


            var request = new TransactionRequest
            {
                Amount = amount,
                PaymentMethodNonce = nonce
            };

            Result<Transaction> result = gateway.Transaction.Sale(request);


            if (result.IsSuccess())
            {


                Transaction transaction = result.Target;


                //create payment object
                Payment payment = new Payment
                {
                    Name = transaction.PayPalDetails.PayerFirstName + " " + transaction.PayPalDetails.PayerLastName,

                    DatePaid = DateTime.Now,

                    PayPalPaymentID = transaction.PayPalDetails.PaymentId,

                    PaymentMethod = (Models.PaymentMethod)1,
                    

                    
                };

                //update fine
                fine.payment = payment;
                fine.Paid = payment.DatePaid;
                
                user.Fines.Add(fine);

                fine.User = user;

                fine.order = uow.OrderRepository.Get(m => m.OrderStatus == 2 && m.UserOrderId.Equals(fine.User.Id));

                user.AccountRestricted = false;

                uow.SaveChanges();

                return RedirectToAction("FinePaymentConfirmation", new { id = fine.FineId });
            }

            else
            {
                
                return RedirectToAction("Index");
            }

        }

        /// <summary>
        /// Method which displays a view showing the fine payment confirmation details
        /// </summary>
        /// <param name="id">id of successfully paid fine</param>
        /// <returns>fine object to the view</returns>
        public ActionResult FinePaymentConfirmation(int id)
        {
            var fine = uow.FineRepository.Get(m => m.FineId == id);


            return View(fine);
        }

        /****************************MANAGE USERS**************************************/


        /// <summary>
        /// Method which returns a view with all members on it in a paged list format
        /// </summary>
        /// <param name="currentFilter">what the user list is currently filtered by</param>
        /// <param name="searchString">search filter to be applied to lise</param>
        /// <param name="page">current page</param>
        /// <returns>a Paged list of users to the view</returns>
        public ViewResult ListAllUsers(string currentFilter, string searchString, int? page)
        {
            //get users who are members
            var users = uow.UserRepository.GetAll(m => m.Role.Equals("Unlimited Member") || m.Role.Equals("Limited Member"));



            if (searchString != null)
            {
                page = 1;
            }
            else
            {
                searchString = currentFilter;
            }
            ViewBag.CurrentFilter = searchString;

            //filter by searchstring.
            if (!String.IsNullOrEmpty(searchString))
            {
                users = users.Where(b => b.UserName.ToUpper().Contains(searchString.ToUpper()));
            }

            //populate viewmodel
            IEnumerable<ListAllUsers> userList = from u in users
                                                 select new ListAllUsers
                                                 {
                                                     FName = u.FName,
                                                     LName = u.LName,
                                                     UserName = u.UserName,
                                                     Address = u.Address,
                                                     City = u.City,
                                                     Postcode = u.PostalCode,
                                                     Id = u.Id
                                                 };



            int pageSize = 10;
            int pageNumber = (page ?? 1);
            //order list by username
            return View(userList.OrderBy(x => x.UserName).ToPagedList(pageNumber, pageSize));
        }

        /// <summary>
        /// Method which returns the view which allows for a user to be deleted
        /// </summary>
        /// <param name="id">id of user to be deleted</param>
        /// <returns>user object to the view</returns>
        //get
        public ActionResult DeleteUser(string id)
        {
            var user = uow.UserRepository.Get(x => x.Id.Equals(id));

            var um = new UserManager<ApplicationUser>(new UserStore<ApplicationUser>(new LibraryAppContext()));

            var userRoles = um.GetRoles(user.Id).FirstOrDefault().ToString();

            user.Role = userRoles;

            return View(user);
        }

  


        /// <summary>
        /// POST Method which allows staff to delete a user. posts details of user to be deleted to Delete method in UOW
        /// </summary>
        /// <param name="id">user id of user to be deleted</param>
        /// <returns>a redirect to the list of all users</returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult StaffDeleteMemberAccount(string id)
        {
            ApplicationUser user = uow.UserRepository.Get(item => item.Id.Equals(id));


            if (user.Reviews.Any())
            {
                foreach (var review in user.Reviews.ToList())
                {
                    uow.ReviewRepository.Delete(review);
                }
            }
            uow.UserRepository.Delete(user);
            uow.SaveChanges();


            return RedirectToAction("ListAllUsers");

        }



        /// <summary>
        /// POST Method which allows user to delete a their account. posts details of user to be deleted to Delete method in UOW
        /// </summary>
        /// <param name="id">user id of user to be deleted</param>
        /// <returns>a redirect to the home page</returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteMemberAccount(string id)
        {
            ApplicationUser user = uow.UserRepository.Get(item => item.Id.Equals(id));
            uow.UserRepository.Delete(user);
            uow.SaveChanges();

            //sign user out, IMPORTANT!
            AuthenticationManager.SignOut(DefaultAuthenticationTypes.ApplicationCookie);
            return RedirectToAction("Index", "Home");
        }


        /****************************AUTOGENERATED CODE***************************/


        //
        // POST: /Manage/RemoveLogin
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> RemoveLogin(string loginProvider, string providerKey)
        {
            ManageMessageId? message;
            var result = await UserManager.RemoveLoginAsync(User.Identity.GetUserId(), new UserLoginInfo(loginProvider, providerKey));
            if (result.Succeeded)
            {
                var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
                if (user != null)
                {
                    await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                }
                message = ManageMessageId.RemoveLoginSuccess;
            }
            else
            {
                message = ManageMessageId.Error;
            }
            return RedirectToAction("ManageLogins", new { Message = message });
        }

        //
        // GET: /Manage/AddPhoneNumber
        public ActionResult AddPhoneNumber()
        {
            return View();
        }

        //
        // POST: /Manage/AddPhoneNumber
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> AddPhoneNumber(AddPhoneNumberViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }
            // Generate the token and send it
            var code = await UserManager.GenerateChangePhoneNumberTokenAsync(User.Identity.GetUserId(), model.Number);
            if (UserManager.SmsService != null)
            {
                var message = new IdentityMessage
                {
                    Destination = model.Number,
                    Body = "Your security code is: " + code
                };
                await UserManager.SmsService.SendAsync(message);
            }
            return RedirectToAction("VerifyPhoneNumber", new { PhoneNumber = model.Number });
        }

        //
        // POST: /Manage/EnableTwoFactorAuthentication
        [HttpPost, ValidateAntiForgeryToken]
        
        public async Task<ActionResult> EnableTwoFactorAuthentication()
        {
            await UserManager.SetTwoFactorEnabledAsync(User.Identity.GetUserId(), true);
            var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
            if (user != null)
            {
                await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
            }
            return RedirectToAction("Index", "Manage");
        }

        //
        // POST: /Manage/DisableTwoFactorAuthentication
        [HttpPost, ValidateAntiForgeryToken]
        
        public async Task<ActionResult> DisableTwoFactorAuthentication()
        {
            await UserManager.SetTwoFactorEnabledAsync(User.Identity.GetUserId(), false);
            var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
            if (user != null)
            {
                await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
            }
            return RedirectToAction("Index", "Manage");
        }

        //
        // GET: /Manage/VerifyPhoneNumber
        public async Task<ActionResult> VerifyPhoneNumber(string phoneNumber)
        {
            var code = await UserManager.GenerateChangePhoneNumberTokenAsync(User.Identity.GetUserId(), phoneNumber);
            // Send an SMS through the SMS provider to verify the phone number
            return phoneNumber == null ? View("Error") : View(new VerifyPhoneNumberViewModel { PhoneNumber = phoneNumber });
        }

        //
        // POST: /Manage/VerifyPhoneNumber
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> VerifyPhoneNumber(VerifyPhoneNumberViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }
            var result = await UserManager.ChangePhoneNumberAsync(User.Identity.GetUserId(), model.PhoneNumber, model.Code);
            if (result.Succeeded)
            {
                var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
                if (user != null)
                {
                    await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                }
                return RedirectToAction("Index", new { Message = ManageMessageId.AddPhoneSuccess });
            }
            // If we got this far, something failed, redisplay form
            ModelState.AddModelError("", "Failed to verify phone");
            return View(model);
        }

        //
        // GET: /Manage/RemovePhoneNumber
        public async Task<ActionResult> RemovePhoneNumber()
        {
            var result = await UserManager.SetPhoneNumberAsync(User.Identity.GetUserId(), null);
            if (!result.Succeeded)
            {
                return RedirectToAction("Index", new { Message = ManageMessageId.Error });
            }
            var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
            if (user != null)
            {
                await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
            }
            return RedirectToAction("Index", new { Message = ManageMessageId.RemovePhoneSuccess });
        }

        //
        // GET: /Manage/ChangePassword
        public ActionResult ChangePassword()
        {
            return View();
        }

        //
        // POST: /Manage/ChangePassword
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> ChangePassword(ChangePasswordViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }
            var result = await UserManager.ChangePasswordAsync(User.Identity.GetUserId(), model.OldPassword, model.NewPassword);
            if (result.Succeeded)
            {
                var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
                if (user != null)
                {
                    await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                }
                return RedirectToAction("Index", new { Message = ManageMessageId.ChangePasswordSuccess });
            }
            AddErrors(result);
            return View(model);
        }

        //
        // GET: /Manage/SetPassword
        public ActionResult SetPassword()
        {
            return View();
        }

        //
        // POST: /Manage/SetPassword
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> SetPassword(SetPasswordViewModel model)
        {
            if (ModelState.IsValid)
            {
                var result = await UserManager.AddPasswordAsync(User.Identity.GetUserId(), model.NewPassword);
                if (result.Succeeded)
                {
                    var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
                    if (user != null)
                    {
                        await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                    }
                    return RedirectToAction("Index", new { Message = ManageMessageId.SetPasswordSuccess });
                }
                AddErrors(result);
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

        //
        // GET: /Manage/ManageLogins
        public async Task<ActionResult> ManageLogins(ManageMessageId? message)
        {
            ViewBag.StatusMessage =
                message == ManageMessageId.RemoveLoginSuccess ? "The external login was removed."
                : message == ManageMessageId.Error ? "An error has occurred."
                : "";
            var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
            if (user == null)
            {
                return View("Error");
            }
            var userLogins = await UserManager.GetLoginsAsync(User.Identity.GetUserId());
            var otherLogins = AuthenticationManager.GetExternalAuthenticationTypes().Where(auth => userLogins.All(ul => auth.AuthenticationType != ul.LoginProvider)).ToList();
            ViewBag.ShowRemoveButton = user.PasswordHash != null || userLogins.Count > 1;
            return View(new ManageLoginsViewModel
            {
                CurrentLogins = userLogins,
                OtherLogins = otherLogins
            });
        }

        //
        // POST: /Manage/LinkLogin
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult LinkLogin(string provider)
        {
            // Request a redirect to the external login provider to link a login for the current user
            return new AccountController.ChallengeResult(provider, Url.Action("LinkLoginCallback", "Manage"), User.Identity.GetUserId());
        }

        //
        // GET: /Manage/LinkLoginCallback
        public async Task<ActionResult> LinkLoginCallback()
        {
            var loginInfo = await AuthenticationManager.GetExternalLoginInfoAsync(XsrfKey, User.Identity.GetUserId());
            if (loginInfo == null)
            {
                return RedirectToAction("ManageLogins", new { Message = ManageMessageId.Error });
            }
            var result = await UserManager.AddLoginAsync(User.Identity.GetUserId(), loginInfo.Login);
            return result.Succeeded ? RedirectToAction("ManageLogins") : RedirectToAction("ManageLogins", new { Message = ManageMessageId.Error });
        }

       

        protected override void Dispose(bool disposing)
        {
            if (disposing && _userManager != null)
            {
                _userManager.Dispose();
                _userManager = null;
            }

            base.Dispose(disposing);
        }

#region Helpers
        // Used for XSRF protection when adding external logins
        private const string XsrfKey = "XsrfId";

        private IAuthenticationManager AuthenticationManager
        {
            get
            {
                return HttpContext.GetOwinContext().Authentication;
            }
        }

        private void AddErrors(IdentityResult result)
        {
            foreach (var error in result.Errors)
            {
                ModelState.AddModelError("", error);
            }
        }

        private bool HasPassword()
        {
            var user = UserManager.FindById(User.Identity.GetUserId());
            if (user != null)
            {
                return user.PasswordHash != null;
            }
            return false;
        }

        private bool HasPhoneNumber()
        {
            var user = UserManager.FindById(User.Identity.GetUserId());
            if (user != null)
            {
                return user.PhoneNumber != null;
            }
            return false;
        }

        public enum ManageMessageId
        {
            AddPhoneSuccess,
            ChangePasswordSuccess,
            SetTwoFactorSuccess,
            SetPasswordSuccess,
            RemoveLoginSuccess,
            RemovePhoneSuccess,
            Error
        }

#endregion
    }
}